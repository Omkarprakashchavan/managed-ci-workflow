name: MCI LINT

on:
  workflow_call:
    outputs:
      lint:
        description: "Status of the Linting job"
        value: ${{ jobs.status-output.outputs.lint }}
        
jobs:
  getbuildsystem:
   runs-on: ubuntu-latest
   outputs:
      output: ${{ steps.get_build_system.outputs.buildsystem }}
   steps:
        - uses: glcp/mci-actions-get-build-system@v1
          id: get_build_system
          with:
            gh_token: ${{ secrets.GITHUB_TOKEN }}
            vars_glcp_build_system: ${{ vars.GLCP_BUILD_SYSTEM }} 
            git_ref: ${{ github.ref }}  
  skip-checks:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      skip_checks: ${{ steps.checks.outputs.SKIP_CHECKS }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.3.0

      - uses: glcp/mci-actions-variables-restore@v2
        with:
          use-artifact: false

      - name: output to skip checks
        id: checks
        run: |
          echo "skip_checks=${{ env.SKIP_CHECKS }}" >> $GITHUB_OUTPUT

  python:
    if: |
      !cancelled() && ( needs.skip-checks.result == 'skipped' || needs.skip-checks.result == 'success' ) &&
      ( needs.getbuildsystem.outputs.output == 'python' || needs.getbuildsystem.outputs.output == 'python-lib' ) && 
      github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && 
      github.event_name != 'release' && github.event.pull_request.user.login != 'dependabot[bot]' &&
      needs.skip-checks.outputs.skip_checks != 'true'
    runs-on: ubuntu-latest
    needs: [getbuildsystem, skip-checks]
    env:
      quay_username: ${{ secrets.CCS_QUAY_CCSPORTAL_BUILDER }}
      quay_password: ${{ secrets.CCS_QUAY_CCSPORTAL_BUILDER_PASSWORD }}
      jfrog_user: ${{ secrets.CCS_JFROG_USERNAME }}
      jfrog_passwd: ${{ secrets.CCS_JFROG_PASSWORD }}
      gh_token: ${{ secrets.GLCP_GH_TOKEN }}
      updatectl_user: ${{ secrets.CCS_UPDATECTL_USER }}
      updatectl_server: ${{ secrets.CCS_UPDATECTL_SERVER }}
      updatectl_key: ${{ secrets.CCS_UPDATECTL_KEY }}
      jira_user: ${{ secrets.CCS_JIRA_USER }}
      jira_apikey: ${{ secrets.CCS_JIRA_APIKEY }}
    steps:
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-lint

      - if: env.LINT_WORKSPACE_BACKUP == 'true'
        name: Restore Workspace
        id: workspace-restore
        uses: glcp/mci-actions-workspace-restore@v1
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

      - if: steps.workspace-restore.outcome == 'skipped'
        name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - uses: glcp/mci-actions-registry-login@v2
        with:
          secrets: ${{ toJson(secrets) }}

      - name: Generate github app token
        id: glcp-gh-token
        uses: glcp/github-app-token-action@v1.7.0
        with:
          app_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_APP_ID }}
          installation_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_INST_ID }}
          private_key: ${{ secrets.MANAGED_CI_WORKFLOW_READ_ONLY_PRIVATE_KEY }}

      - name: Use temporary github token as Env variable
        env:
          GITHUB_APP_TOKEN: ${{ steps.glcp-gh-token.outputs.token }}
        run: |
          echo "The generated token is masked: ${GITHUB_APP_TOKEN}"
          echo "GITHUB_APP_TOKEN=$GITHUB_APP_TOKEN" >> $GITHUB_ENV
        shell: bash

      - name: BootStrap Dev Env
        id: bootstrap
        uses: glcp/mci-actions-bootstrap-dev-env@v2.0
        with:
          app_name: ${{ env.APP_NAME }}
          devenvdir: ${{ env.DEV_ENV_DIR }}
          dc_project_name: ${{ env.DC_PROJECT_NAME }}
          registry: quay.io
          quay_username: ${{ secrets.CCS_QUAY_CCSPORTAL_BUILDER }}
          quay_password: ${{ secrets.CCS_QUAY_CCSPORTAL_BUILDER_PASSWORD }}
          gh_token: ${{ env.GITHUB_APP_TOKEN }}
          jfrog_user: ${{ secrets.CCS_JFROG_USERNAME }}
          jfrog_passwd: ${{ secrets.CCS_JFROG_PASSWORD }}
          devenv_tag: ${{ env.DEV_ENV_TAG }}
          bootstrap_dev_env_ref: v2.0
        env:
          gh_token: ${{ env.GITHUB_APP_TOKEN }}

      - name: Lint
        id: lint
        shell: bash
        run: |
            cd $GITHUB_WORKSPACE/${{ env.DEV_ENV_DIR }}
            #!/bin/bash -x
            ws/${{ env.APP_NAME }}/automation/ci/run-in-ccs-dev.sh \
              ${{ env.DC_PROJECT_NAME }} \
              poetry run scripts/lint.sh
            if [ $? -ne 0 ]; then echo "Lint failed"; exit 1; fi;

      - uses: glcp/mci-actions-variables-backup@v2
        with:
          artifact-name: variables-lint

      - uses: glcp/mci-actions-workspace-backup@v1
        if: env.LINT_WORKSPACE_BACKUP == 'true'
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

  maven:
    if: |
      !cancelled() &&  needs.skip-checks.result != 'failure' &&
      needs.getbuildsystem.outputs.output == 'maven' && (github.ref != format('refs/heads/{0}', github.event.repository.default_branch) ||
       vars.END_TO_END_WF == 'true') && 
      github.event_name != 'release' && github.event.pull_request.user.login != 'dependabot[bot]' &&
      needs.skip-checks.outputs.skip_checks != 'true'
    permissions:
      contents: write
    needs: [getbuildsystem, skip-checks]
    runs-on: ubuntu-latest
    steps:
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-lint

      - name: Generate github app token
        id: glcp-gh-token
        uses: glcp/github-app-token-action@v1.7.0
        with:
          app_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_APP_ID }}
          installation_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_INST_ID }}
          private_key: ${{ secrets.MANAGED_CI_WORKFLOW_READ_ONLY_PRIVATE_KEY }}

      - if: env.LINT_WORKSPACE_BACKUP == 'true'
        name: Restore Workspace
        id: workspace-restore
        uses: glcp/mci-actions-workspace-restore@v1
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

      - if: steps.workspace-restore.outcome == 'skipped'
        name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v5
        continue-on-error: true
        env:
          VALIDATE_ALL_CODEBASE: false
          FILTER_REGEX_EXCLUDE: ${{ env.LINT_REGEX_EXCLUDE }}
          DEFAULT_BRANCH: ${{github.event.repository.default_branch}}
          GITHUB_TOKEN: ${{ steps.glcp-gh-token.outputs.token }}
          CREATE_LOG_FILE: true
          LOG_FILE: lint-output.log

      - name: Git diff
        continue-on-error: true
        run: |
          #compare PR banch with target branch to get changed lines i code
          git diff origin/${{ github.base_ref }} origin/${{ github.head_ref }} | gawk '
          match($0,"^@@ -([0-9]+),([0-9]+) [+]([0-9]+),([0-9]+) @@",a){
            left=a[1]
            ll=length(a[2])
            right=a[3]
            rl=length(a[4])
          }
          /^(---|\+\+\+|[^-+ ])/{ print;next }
          { line=substr($0,2) }
          /^[-]/{ printf "-%"ll"s %"rl"s:%s\n",left++,""     ,line;next }
          /^[+]/{ printf "+%"ll"s %"rl"s:%s\n",""    ,right++,line;next }
                { printf " %"ll"s %"rl"s:%s\n",left++,right++,line }
          ' > git-diff.txt
      
      - name: Check linting on new code 
        if: always()
        uses: glcp/mci-actions-linter-checklines@v1.0.0 
        with:
          GITHUB_APP_TOKEN: ${{ steps.glcp-gh-token.outputs.token }}

      - uses: glcp/mci-actions-backup-outputs@v1
        if: always()
        with:
          file_path: lint-output.log
          
      - uses: glcp/mci-actions-variables-backup@v2
        with:
          artifact-name: variables-lint

      - uses: glcp/mci-actions-workspace-backup@v1
        if: env.LINT_WORKSPACE_BACKUP == 'true'
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

  golang:
    if: |
      !cancelled() &&
      !failure() &&
      (needs.getbuildsystem.outputs.output == 'golang' || needs.getbuildsystem.outputs.output == 'golang-lib') &&
      (github.ref != format('refs/heads/{0}', github.event.repository.default_branch) || vars.END_TO_END_WF == 'true') && 
      github.event_name != 'release' &&
      github.event.pull_request.user.login != 'dependabot[bot]' &&
      needs.skip-checks.outputs.skip_checks != 'true'
    permissions:
      contents: write
    needs: [getbuildsystem, skip-checks]
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GLCP_GH_TOKEN }}
    steps:
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-lint

      - if: env.LINT_WORKSPACE_BACKUP == 'true'
        name: Restore Workspace
        id: workspace-restore
        uses: glcp/mci-actions-workspace-restore@v1
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

      - if: steps.workspace-restore.outcome == 'skipped'
        name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Configure Ruleguard integration for Go linting
        uses: glcp/mci-actions-ruleguard-golangci@v1.01

      - name: golangci-lint
        # if: false
        uses: golangci/golangci-lint-action@v3
        with:
          args: "--timeout 5m -v"
          skip-pkg-cache: true
          only-new-issues: true

      - uses: glcp/mci-actions-variables-backup@v2
        with:
          artifact-name: variables-lint

      - uses: glcp/mci-actions-workspace-backup@v1
        if: env.LINT_WORKSPACE_BACKUP == 'true'
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

  shell:
    if: |
      !cancelled() && ( needs.skip-checks.result == 'skipped' || needs.skip-checks.result == 'success' ) &&
      needs.getbuildsystem.outputs.output == 'shell' && 
      github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && 
      github.event_name != 'release' && github.event.pull_request.user.login != 'dependabot[bot]' &&
      needs.skip-checks.outputs.skip_checks != 'true' 
    permissions:
      contents: write
    needs: [getbuildsystem, skip-checks]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GLCP_GH_TOKEN }}
    steps:
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-lint

      - name: Generate github app token
        id: glcp-gh-token
        uses: glcp/github-app-token-action@v1.7.0
        with:
          app_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_APP_ID }}
          installation_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_INST_ID }}
          private_key: ${{ secrets.MANAGED_CI_WORKFLOW_READ_ONLY_PRIVATE_KEY }} 

      - if: env.LINT_WORKSPACE_BACKUP == 'true'
        name: Restore Workspace
        id: workspace-restore
        uses: glcp/mci-actions-workspace-restore@v1
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

      - if: steps.workspace-restore.outcome == 'skipped'
        name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          FILTER_REGEX_EXCLUDE: ${{ env.LINT_REGEX_EXCLUDE }}
          DEFAULT_BRANCH: ${{github.event.repository.default_branch}}
          GITHUB_TOKEN: ${{ steps.glcp-gh-token.outputs.token }}
          CREATE_LOG_FILE: true
          LOG_FILE: lint-output.log

      - name: Git diff
        continue-on-error: true
        run: |
          #compare PR banch with target branch to get changed lines i code
          git diff origin/${{ github.base_ref }} origin/${{ github.head_ref }} | gawk '
          match($0,"^@@ -([0-9]+),([0-9]+) [+]([0-9]+),([0-9]+) @@",a){
            left=a[1]
            ll=length(a[2])
            right=a[3]
            rl=length(a[4])
          }
          /^(---|\+\+\+|[^-+ ])/{ print;next }
          { line=substr($0,2) }
          /^[-]/{ printf "-%"ll"s %"rl"s:%s\n",left++,""     ,line;next }
          /^[+]/{ printf "+%"ll"s %"rl"s:%s\n",""    ,right++,line;next }
                { printf " %"ll"s %"rl"s:%s\n",left++,right++,line }
          ' > git-diff.txt
      
      - name: Check linting on new code
        if: always()
        uses: glcp/mci-actions-linter-checklines@v1.0.0 
        with:
          GITHUB_APP_TOKEN: ${{ steps.glcp-gh-token.outputs.token }}

      - uses: glcp/mci-actions-backup-outputs@v1
        if: always()
        with:
          file_path: lint-output.log
          
      - uses: glcp/mci-actions-variables-backup@v2
        with:
          artifact-name: variables-lint

      - uses: glcp/mci-actions-workspace-backup@v1
        if: env.LINT_WORKSPACE_BACKUP == 'true'
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

  sbt:
    if: |
      !cancelled() && ( needs.skip-checks.result == 'skipped' || needs.skip-checks.result == 'success' ) &&
      needs.getbuildsystem.outputs.output == 'sbt' && 
      github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && 
      github.event_name != 'release' && github.event.pull_request.user.login != 'dependabot[bot]' &&
      needs.skip-checks.outputs.skip_checks != 'true'
    runs-on: ubuntu-latest
    needs: [getbuildsystem, skip-checks]
    env:
      ARTIFACTORY_USER: ${{ secrets.HPE_ARTIFACTORY_BBOB_USERNAME }}
      ARTIFACTORY_PWD: ${{ secrets.HPE_ARTIFACTORY_BBOB_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-lint

      - if: env.LINT_WORKSPACE_BACKUP == 'true'
        name: Restore Workspace
        id: workspace-restore
        uses: glcp/mci-actions-workspace-restore@v1
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

      - if: steps.workspace-restore.outcome == 'skipped'
        name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.DISTRIBUTION }}

      - name: Setup env credentials
        uses: glcp/harmony-actions-artifactory-credentials@master
        with:
          ARTIFACTORY_USER: ${{ env.ARTIFACTORY_USER }}
          ARTIFACTORY_PWD: ${{ env.ARTIFACTORY_PWD }}

      - name: Copy Credentials to right location
        run: |
          echo $HOME
          set -e -x
          mkdir -p $HOME/.ivy2/
          cp "/home/runner/work/_temp/_github_home/.ivy2/.credentials-hpeartifacts.jfrog.io" \
            "$HOME/.ivy2/.credentials-hpeartifacts.jfrog.io"
          mkdir -p $HOME/.pip/
          cp "/home/runner/work/_temp/_github_home/.pip/pip.conf" \
            "$HOME/.pip/pip.conf"
          cp "/home/runner/work/_temp/_github_home/.pypirc" \
            "$HOME/.pypirc"
        shell: bash

      - name: scalaFmt
        id: scalaFmt
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: Scala FMT
          GIT_AUTHOR_EMAIL: glcp-gh-bot@github.com
          GIT_COMMITTER_NAME: Scala FMT
          GIT_COMMITTER_EMAIL: glcp-gh-bot@github.com
        run: |
          git checkout ${{ github.head_ref }}
          sbt ";scalafmtAll;scalafmtSbt"
          echo "reformatting code using scalafmt"
          git remote set-url origin "https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }}.git"
          git add .
          # git commit -m "Reformat code using ScalaFmt" --no-verify || echo -e "notCommit: true" >> .github/mci-variables.yaml
          git commit -m "Reformat code using ScalaFmt" --no-verify || echo -e "notCommit=true" >> $GITHUB_OUTPUT
          git push -u origin ${{ github.head_ref }} --no-verify
        shell: bash

      - uses: glcp/mci-actions-variables-backup@v2
        with:
          artifact-name: variables-lint

      - name: Checking notCommit output
        run: |
          echo "${{ steps.scalaFmt.outputs.notCommit }}"
        shell: bash

      - uses: glcp/mci-actions-workspace-backup@v1
        if: env.LINT_WORKSPACE_BACKUP =='true'
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

  onprem:
    if: needs.getbuildsystem.outputs.output == 'onprem' && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && github.event_name != 'release' && github.event.pull_request.user.login != 'dependabot[bot]'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [getbuildsystem, skip-checks]
    steps:
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-lint

      - if: env.LINT_WORKSPACE_BACKUP == 'true'
        name: Restore Workspace
        id: workspace-restore
        uses: glcp/mci-actions-workspace-restore@v1
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

      - if: steps.workspace-restore.outcome == 'skipped'
        name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0

      - name: Generate github app token
        id: glcp-gh-token
        uses: glcp/github-app-token-action@v1.7.0
        with:
          app_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_APP_ID }}
          installation_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_INST_ID }}
          private_key: ${{ secrets.MANAGED_CI_WORKFLOW_READ_ONLY_PRIVATE_KEY }}

      - name: Use temporary github token as Env variable
        env:
          GITHUB_APP_TOKEN: ${{ steps.glcp-gh-token.outputs.token }}
        run: |
          echo "The generated token is masked: ${GITHUB_APP_TOKEN}"
          echo "GITHUB_APP_TOKEN=$GITHUB_APP_TOKEN" >> $GITHUB_ENV
        shell: bash

      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: ${{github.event.repository.default_branch}}
          GITHUB_TOKEN: ${{ env.GITHUB_APP_TOKEN }}
          CREATE_LOG_FILE: true
          LOG_FILE: lint-output.log

      - uses: glcp/mci-actions-backup-outputs@v1
        if: always()
        with:
          file_path: lint-output.log

      - uses: glcp/mci-actions-workspace-backup@v1
        if: env.LINT_WORKSPACE_BACKUP == 'true'
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip


  terraform:
    if: |
      !cancelled() && ( needs.skip-checks.result == 'skipped' || needs.skip-checks.result == 'success' ) &&
      needs.getbuildsystem.outputs.output == 'terraform' && 
      github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && 
      github.event_name != 'release' && github.event.pull_request.user.login != 'dependabot[bot]' &&
      needs.skip-checks.outputs.skip_checks != 'true'
    permissions:
      contents: write
    needs: [getbuildsystem, skip-checks]
    runs-on: ubuntu-latest
    steps:
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-lint

      - if: env.LINT_WORKSPACE_BACKUP == 'true'
        name: Restore Workspace
        id: workspace-restore
        uses: glcp/mci-actions-workspace-restore@v1
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

      - if: steps.workspace-restore.outcome == 'skipped'
        name: Checkout Code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
          
      - name: Generate github app token
        id: glcp-gh-token
        uses: glcp/github-app-token-action@v1.7.0
        with:
          app_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_APP_ID }}
          installation_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_INST_ID }}
          private_key: ${{ secrets.MANAGED_CI_WORKFLOW_READ_ONLY_PRIVATE_KEY }}

      - name: Use temporary github token as Env variable
        env:
          GITHUB_APP_TOKEN: ${{ steps.glcp-gh-token.outputs.token }}
        run: |
          echo "The generated token is masked: ${GITHUB_APP_TOKEN}"
          echo "GITHUB_APP_TOKEN=$GITHUB_APP_TOKEN" >> $GITHUB_ENV
        shell: bash
        
      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          FILTER_REGEX_EXCLUDE: ${{ env.LINT_REGEX_EXCLUDE }}
          DEFAULT_BRANCH: ${{github.event.repository.default_branch}}
          GITHUB_TOKEN: ${{ env.GITHUB_APP_TOKEN }}
          CREATE_LOG_FILE: true
          LOG_FILE: lint-output.log

      - name: Git diff
        continue-on-error: true
        run: |
          #compare PR banch with target branch to get changed lines i code
          git diff origin/${{ github.base_ref }} origin/${{ github.head_ref }} | gawk '
          match($0,"^@@ -([0-9]+),([0-9]+) [+]([0-9]+),([0-9]+) @@",a){
            left=a[1]
            ll=length(a[2])
            right=a[3]
            rl=length(a[4])
          }
          /^(---|\+\+\+|[^-+ ])/{ print;next }
          { line=substr($0,2) }
          /^[-]/{ printf "-%"ll"s %"rl"s:%s\n",left++,""     ,line;next }
          /^[+]/{ printf "+%"ll"s %"rl"s:%s\n",""    ,right++,line;next }
                { printf " %"ll"s %"rl"s:%s\n",left++,right++,line }
          ' > git-diff.txt
      
      - name: Check linting on new code 
        if: always()
        uses: glcp/mci-actions-linter-checklines@v1.0.0 

      - uses: glcp/mci-actions-backup-outputs@v1
        if: always()
        with:
          file_path: lint-output.log
            
      - uses: glcp/mci-actions-workspace-backup@v1
        if: env.LINT_WORKSPACE_BACKUP == 'true'
        with:
          artifact-name: workspace-lint
          zip-name: workspace-lint.zip

  status-output:
    needs: [python, maven, golang, shell, sbt, terraform, onprem]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      lint: ${{ steps.setoutput.outputs.lint }}
    steps:
      - id: setoutput
        run: |
          for i in ${{ needs.python.result }} ${{ needs.maven.result }} ${{ needs.golang.result }} ${{ needs.shell.result }} ${{ needs.sbt.result }} ${{ needs.terraform.result }} ${{ needs.onprem.result }}
          do
          if [ $i == success ]; then
            echo "Linting completed successfully for ${{ github.repository }}"
            echo "lint=success" >> $GITHUB_OUTPUT
          elif [ $i == failure ]; then
            echo "Linting failed for ${{ github.repository }}"
            echo "lint=failure" >> $GITHUB_OUTPUT
          fi
          done
          
  # status-check:
  #   needs: [python, maven, golang, shell, sbt, terraform]
  #   runs-on: ubuntu-latest
  #   if: always() && !failure() && !cancelled()
  #   outputs:
  #     success: ${{ steps.setoutput.outputs.success }}
  #     lint: ${{ steps.setoutput.outputs.lint }}
  #   steps:
  #     - id: setoutput
  #       run: |
  #         echo "success=true" >> $GITHUB_OUTPUT

  # lint-done:
  #   if: always()
  #   runs-on: ubuntu-latest
  #   needs: status-check
  #   steps:
  #     - run: |
  #         passed="${{ needs.status-check.outputs.success }}"
  #         if [[ $passed == "true" ]]; then
  #           echo "MCI LINT COMPLETED SUCCESSFULLY"
  #           exit 0
  #         else
  #           echo "MCI LINT FAILED"
  #           exit 1
  #         fi
