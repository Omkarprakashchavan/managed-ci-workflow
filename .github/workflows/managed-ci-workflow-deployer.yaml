name: Managed CI Workflow Deployer
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'workflow-deployment.yaml'
  schedule:
    - cron: '0 11 * * 0-6'
jobs:
  deploy:
    runs-on: ubuntu-latest-4-cores
    steps:
      - name: Clone the MCI repository
        uses: actions/checkout@v3.3.0
      - name: Generate github app token
        id: glcp-gh-token
        uses: glcp/github-app-token-action@v1.7.0
        with:
          app_id: ${{ secrets.ORG_POLICY_GITHUB_APP_ID }}
          installation_id: ${{ secrets.ORG_POLICY_GITHUB_APP_INSTALL_ID }}
          private_key: ${{ secrets.ORG_POLICY_GITHUB_APP_PRIVATE_KEY }}
      - name: Use github token as Env variable
        env:
          GITHUB_APP_TOKEN: ${{ steps.glcp-gh-token.outputs.token }}
        run: |
          echo "GITHUB_APP_TOKEN=$GITHUB_APP_TOKEN" >> $GITHUB_ENV
        shell: bash
      - name: Install Python modules
        run: |
          pip3 install ruamel.yaml
          pip3 install pyyaml
          pip3 install requests
      - name: Clone the report repository
        uses: actions/checkout@v3.3.0
        with:
          repository: glcp/devops-reports
          token: ${{ steps.glcp-gh-token.outputs.token }}
          ref: main
          path: devops-reports
      - name: Invoke Python modules to deploy managed workflows
        run: |
          ### TODO set alternate filename and branch name for testing
          ### in repo "devx-sonarqube"
          # export SQ_CONFIG_FILENAME=sonar-dev.yaml
          # export SQ_BRANCH_NAME=<branch-name>

          git config --global user.email "glcp-giotto@hpe.com"
          git config --global user.name "Automation"

          echo ${{ steps.glcp-gh-token.outputs.token }}
          python main.py
        shell: bash
      - name: Check if SonarQube onboarding is required
        # the text file is created by the Python script "main.py" if
        # there are repos to be onboarded to SonarQube
        id: check_sq
        uses: glcp/file-existence-action@v2
        with:
          files: ${{GITHUB.WORKSPACE}}/need-sq-onboarding.txt
      - name: Trigger SonarQube onboarding if needed
        if: steps.check_sq.outputs.files_exists == 'true'
        uses: glcp/trigger-workflow-and-wait@v1.6.5
        with:
          # TODO set the branch name for testing purposes
          # ref: <branch-name>
          # TODO change the file name for testing purposes
          # workflow_file_name: sonar-dev.yaml
          workflow_file_name: sonar.yaml
          owner: glcp
          repo: devx-sonarqube
          client_payload: "{\"run-comment\": \n   \"triggered by '${{github.workflow}}' with run num ${{github.run_number}}\"}\n"
          github_token: ${{ steps.glcp-gh-token.outputs.token }}
      - name: Check file existence
        id: check_files
        uses: glcp/file-existence-action@v2
        with:
          files: "${{GITHUB.WORKSPACE}}/devops-reports/workflow-reports/workflows-deployed.yaml"
      - name: Show deployed workflow report
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          ls -l
          echo ${{GITHUB.WORKSPACE}}/devops-reports/workflow-reports/workflows-deployed.yaml
          cat ${{GITHUB.WORKSPACE}}/devops-reports/workflow-reports/workflows-deployed.yaml
        shell: bash
      - name: Check for changes to report
        id: verify_report_changes
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd ${{GITHUB.WORKSPACE}}/devops-reports/workflow-reports
          git diff --quiet . || echo "changed=true" >> $GITHUB_OUTPUT
      - name: Commit deployed workflow report
        if: steps.check_files.outputs.files_exists == 'true' && steps.verify_report_changes.outputs.changed == 'true'
        run: |
          cd ${{GITHUB.WORKSPACE}}/devops-reports/workflow-reports
          git config --global user.email "glcp-giotto@hpe.com"
          git config --global user.name "glcp giotto"
          git add  workflows-deployed.yaml
          git commit  -m "Create/update deployed workflow report workflows-deployed.yaml"
          git push origin main
        shell: bash
  generate_metrics:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Run Custom Action
        uses: glcp/mci-actions-export-metrics@v1.0
        with:
          githubToken: ${{secrets.GLCP_GH_TOKEN}}
          collect_workflow_run_metrics: true
          collect_job_metrics: false
          collect_step_metrics: false
          clientId: ${{ vars.METRIC_CLIENT_ID }}
          clientSecret: ${{ secrets.METRIC_CLIENT_SECRET }}
          issuerUrl: ${{ vars.METRIC_ISSUER_URL }}
          endpoint: ${{ vars.METRIC_ENDPOINT }}
          #optional inputs
          prefer_distribution_workflow_run_metrics: false
          prefer_distribution_job_metrics: false
          prefer_distribution_step_metrics: false
