#
# Managed CI Workflow - Build
#
name: Managed CI Build for Python
on:
  workflow_call:

jobs:
  get-vars:
    name: python/get-vars
    runs-on: ubuntu-latest
    outputs:
      skip-coreupdate-push: ${{ steps.outvars.outputs.skip-coreupdate-push }}
      build-runner: ${{ steps.outvars.outputs.build-runner }}
      JFROG_USERNAME: ${{ steps.jfrog-creds.outputs.JFROG_USERNAME }}
      JFROG_PASSWORD: ${{ steps.jfrog-creds.outputs.JFROG_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.3.0
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          use-artifact: false
      - name: Set output variables
        id: outvars
        run: |
          echo "skip-coreupdate-push=$SKIP_COREUPDATE_PUSH" >> $GITHUB_OUTPUT
          if [[ "${{ env.BUILD_RUNNER }}" != "" ]]; then
            echo "build-runner=${{ env.BUILD_RUNNER }}" >> $GITHUB_OUTPUT
          else
            echo "build-runner=ubuntu-latest" >> $GITHUB_OUTPUT
          fi

      - name: Set JFrog Credentials
        id: jfrog-creds
        uses: glcp/mci-action-jfrog-credentials@v1.0.0
        with:
          JFROG_URL: $JFROG_URL
          secrets: ${{ toJson(secrets) }}

  create-tag:
    name: python/create-tag
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3.3.0

    - uses: glcp/mci-actions-variables-restore@v2
      with:
        use-artifact: false

    - name: Set env var VERSION_NUMBER
      uses: glcp/mci-actions-version-number@v1

    - name: Assemble Git Tag
      id: tag_version
      shell: bash
      run: |
        MAJOR="2"
        MINOR="0"
        if [[ "${{ env.VERSION_MAJOR }}" != "" ]]; then MAJOR=${{ env.VERSION_MAJOR }}; fi
        if [[ "${{ env.VERSION_MINOR }}" != "" ]]; then MINOR=${{ env.VERSION_MINOR }}; fi
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]]; then
          export tag="${MAJOR}.${VERSION_NUMBER}.${MINOR}"
          git tag $tag
          git push --tags
        elif [[ "${{ github.event.action }}" == "released" ]]; then
          export tag="${{ github.ref_name }}"
        elif [ "${{ startsWith(github.ref, 'refs/heads/hotfix') }}" == "true" ]; then
          VERSION=$(echo ${{ github.ref_name }} | awk -F- '{print $2}')
          echo $VERSION
          HOTFIX_MAJOR=$(echo $VERSION | awk -F. '{print $1}')
          HOTFIX_MINOR=$(echo $VERSION | awk -F. '{print $2}')
          export tag="${HOTFIX_MAJOR}.${HOTFIX_MINOR}.${{ github.run_number }}"
          git tag $tag
          git push --tags
        else
          export tag="${MAJOR}.${VERSION_NUMBER}.${MINOR}-dev"
        fi
        echo "Git Tag version: $tag"
        echo "tag=$tag" >> $GITHUB_OUTPUT

    - uses: glcp/mci-actions-variables-backup@v2
      with:
        artifact-name: variables-build

    outputs:
      tag: ${{ steps.tag_version.outputs.tag }}
      set-matrix: ${{ env.MULTI_BUILD }}
      
  set-matrix-variables:
    name: python/set-matrix-variables
    runs-on: ubuntu-latest
    if: needs.create-tag.outputs.tag != '' && needs.create-tag.outputs.set-matrix == 'true'
    needs: create-tag
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout Code for App Build
      uses: actions/checkout@v3.3.0
      
    - uses: glcp/mci-actions-variables-restore@v2
      with:
        use-artifact: false

    - id: set-matrix
      run: |
        echo "matrix=$(yq -I=0 -o=json '{"include": .PRODUCTS}' .github/mci-variables.yaml)" >> $GITHUB_OUTPUT
        echo "$(yq -I=0 -o=json '{"include": .PRODUCTS}' .github/mci-variables.yaml | jq)"
        
  docker-build:
    name: python/docker-build
    runs-on: ${{ needs.get-vars.outputs.build-runner }}
    needs: [get-vars, create-tag, set-matrix-variables]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.action == 'released'
    strategy:
      matrix: ${{fromJson(needs.set-matrix-variables.outputs.matrix)}}
    steps:
      - name: Checkout Code for App Build
        uses: actions/checkout@v3.3.0

      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-build

      - uses: glcp/mci-actions-registry-login@v2
        with:
          secrets: ${{ toJson(secrets) }}
  
      - name: Generate github app token
        id: glcp-gh-token
        uses: glcp/github-app-token-action@v1.7.0
        with:
          app_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_APP_ID }}
          installation_id: ${{ vars.MANAGED_CI_WORKFLOW_READ_ONLY_INST_ID }}
          private_key: ${{ secrets.MANAGED_CI_WORKFLOW_READ_ONLY_PRIVATE_KEY }}
  
      - name: Docker Build and Push
        uses: glcp/mci-actions-docker-build-push@v1
        with:
          dockerfile_path: ${{ matrix.DOCKERFILE_PATH }}
          image_registry: ${{ matrix.IMAGE_REGISTRY }}
          tag: ${{ needs.create-tag.outputs.tag }}${{ matrix.TAG_EXTENSION }}
          target: ${{ matrix.TARGET }}
          appname: ${{ env.APP_NAME }}
          appid: ${{ env.APP_ID }}
          registry: quay.io
          build_type: ${{ matrix.BUILD_TYPE }}
          # gh_token: ${{ steps.glcp-gh-token.outputs.token }}
          base_image: ${{ matrix.base_image }}
          docker_push: ${{ matrix.DOCKER_PUSH }}
          secrets: ${{ toJSON(secrets) }}

  set-artifact-urls:
    name: python/set-artifact-urls
    runs-on: ubuntu-latest
    needs: [create-tag, set-matrix-variables, docker-build]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.action == 'released'
    strategy:
      max-parallel: 1
      matrix: ${{fromJson(needs.set-matrix-variables.outputs.matrix)}}
    steps:
      - uses: glcp/mci-actions-variables-restore@v2
        with:
          artifact-name: variables-build
          
      - uses: glcp/mci-actions-registry-login@v2
        with:
          secrets: ${{ toJson(secrets) }}

      - name: Set ARTIFACT_URLS with sha1s
        run: |
          docker pull quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }}${{ matrix.TAG_EXTENSION }}
          export product_name=${{ matrix.APP_NAME }}${{ matrix.TAG_EXTENSION }}
          export artifact_url="$(docker inspect --format='{{index .RepoDigests 0}}' quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }}${{ matrix.TAG_EXTENSION }})"
          yq -i '.SBOM += [{"PRODUCT_NAME": strenv(product_name), "ARTIFACT_URL": strenv(artifact_url)}]' .github/mci-variables.yaml
        shell: bash

      - uses: glcp/mci-actions-variables-backup@v2
        with:
          artifact-name: variables-build

  build-app:
    name: python/build-app
    runs-on: ${{ needs.get-vars.outputs.build-runner }}
    needs: [get-vars, create-tag, set-matrix-variables]
    if: always() && !cancelled() && needs.set-matrix-variables.result == 'skipped' && (github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.action == 'released')
    steps:
    - name: Checkout Code for App Build
      uses: actions/checkout@v3.3.0

    - uses: glcp/mci-actions-variables-restore@v2
      with:
        artifact-name: variables-build

    - name: Docker App Build
      uses: glcp/mci-actions-docker-build-push-app@v2
      with:
        appname: ${{ env.APP_NAME }}
        appid: ${{ env.APP_ID }}
        tag: ${{ needs.create-tag.outputs.tag }}
        registry: quay.io
        image_registry: "quay.io/ccsportal/${{ env.APP_NAME }}"
        base_image: ${{ env.BASE_IMAGE }}
        secrets: ${{ toJSON(secrets) }}

    - name: Docker App Build with fips
      uses: glcp/mci-actions-docker-build-push-app@v2
      if: env.BASE_IMAGE_FIPS != ''
      with:
        appname: ${{ env.APP_NAME }}-fips
        appid: ${{ env.APP_ID_FIPS }}
        tag: ${{ needs.create-tag.outputs.tag }}-fips
        registry: quay.io
        image_registry: "quay.io/ccsportal/${{ env.APP_NAME }}"
        base_image: ${{ env.BASE_IMAGE_FIPS }}
        secrets: ${{ toJSON(secrets) }}

  build-automation:
    name: python/build-automation
    runs-on: ${{ needs.get-vars.outputs.build-runner }}
    needs: [get-vars, create-tag, build-app, set-matrix-variables]
    if: always() && !cancelled() && needs.set-matrix-variables.result == 'skipped' && (github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.action == 'released')
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3.3.0

    - uses: glcp/mci-actions-variables-restore@v2
      with:
        artifact-name: variables-build

    - name: Check for Dockerfile_FT existence
      id: check_dockerfile_ft
      uses: glcp/file-existence-action@v2
      with:
        files: "./tests/feature_test/docker/Dockerfile_FT"

    - name: Docker Automation Build
      if: steps.check_dockerfile_ft.outputs.files_exists == 'true'
      uses: glcp/mci-actions-docker-build-push-automation@v2
      with:
        appname: ${{ env.APP_NAME }}
        appid: ${{ env.APP_ID }}
        tag: ${{ needs.create-tag.outputs.tag }}
        registry: quay.io
        image_registry: "quay.io/ccsportal/${{ env.APP_NAME }}"
        secrets: ${{ toJSON(secrets) }}

    - uses: glcp/mci-actions-registry-login@v2
      with:
        secrets: ${{ toJson(secrets) }}

    - name: Set ARTIFACT_URLS with sha1s
      run: |
        docker pull quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }}
        export product_name=${{ env.APP_NAME }}
        export artifact_url="$(docker inspect --format='{{index .RepoDigests 0}}' quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }})"
        yq -i '.SBOM += [{"PRODUCT_NAME": strenv(product_name), "ARTIFACT_URL": strenv(artifact_url)}]' .github/mci-variables.yaml

        if [[ -n "${{ env.BASE_IMAGE_FIPS }}" ]]; then
          docker pull quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }}-fips
          export product_name="${{ env.APP_NAME }}-fips"
          export artifact_url="$(docker inspect --format='{{index .RepoDigests 0}}' quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }}-fips)"
          yq -i '.SBOM += [{"PRODUCT_NAME": strenv(product_name), "ARTIFACT_URL": strenv(artifact_url)}]' .github/mci-variables.yaml
        fi

        if [[ "${{ steps.check_dockerfile_ft.outputs.files_exists }}" == "true" ]]; then
          docker pull quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }}-automation
          export product_name="${{ env.APP_NAME }}-automation"
          export artifact_url="$(docker inspect --format='{{index .RepoDigests 0}}' quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }}-automation)"
          yq -i '.SBOM += [{"PRODUCT_NAME": strenv(product_name), "ARTIFACT_URL": strenv(artifact_url)}]' .github/mci-variables.yaml
        fi
      shell: bash

    - uses: glcp/mci-actions-variables-backup@v2
      with:
        artifact-name: variables-build

  coreupdate:
    name: python/core-update
    needs: [get-vars, create-tag, docker-build, build-app, build-automation]
    runs-on: ccs-runner
    if: always() && 
       (needs.get-vars.outputs.skip-coreupdate-push != 'true') &&
       (needs.docker-build.result == 'skipped' || needs.docker-build.result == 'success' ) && 
       (needs.build-app.result == 'skipped' || needs.build-app.result == 'success' ) && 
       (needs.build-automation.result == 'skipped' || needs.build-automation.result == 'success' ) && 
       (github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.action == 'released')
    steps:
    - uses: glcp/mci-actions-variables-restore@v2
      with:
        artifact-name: variables-build

    - name: Checkout Code for Coreupdate Push
      uses: actions/checkout@v3.3.0
      
    - name: Channel
      id: channel
      uses: glcp/mci-actions-coreupdate-channel@v1.01

    - name: Coreupdate Push
      if: steps.channel.outputs.channel != ''
      uses: glcp/mci-actions-coreupdate@v1.0
      env:
        jfrog_username: ${{ needs.get-vars.outputs.JFROG_USERNAME }}
        jfrog_password: ${{ needs.get-vars.outputs.JFROG_PASWORD }}
      with:
        appname: ${{ env.APP_NAME }}
        appid: ${{ env.APP_ID }}
        tag: ${{ needs.create-tag.outputs.tag }}
        image_registry: "quay.io/ccsportal/${{ env.APP_NAME }}"
        channel: ${{ steps.channel.outputs.channel }}
        UPDATECTL_USER: ${{ secrets.CCS_UPDATECTL_USER }}
        UPDATECTL_SERVER: ${{ secrets.CCS_UPDATECTL_SERVER }}
        UPDATECTL_KEY: ${{ secrets.CCS_UPDATECTL_KEY }}
        COREROLLER_USER: ${{ secrets.CCS_COREROLLER_USER }}
        COREROLLER_SERVER: ${{ secrets.CCS_COREROLLER_SERVER }}
        COREROLLER_KEY: ${{ secrets.CCS_COREROLLER_KEY }}

    - name: Coreupdate Push with fips
      if: env.BASE_IMAGE_FIPS != '' && steps.channel.outputs.channel != ''
      uses: glcp/mci-actions-coreupdate@v1.0
      env:
        jfrog_username: ${{ needs.get-vars.outputs.JFROG_USERNAME }}
        jfrog_password: ${{ needs.get-vars.outputs.JFROG_PASWORD }}
      with:
        appname: ${{ env.APP_NAME }}-fips
        appid: ${{ env.APP_ID_FIPS }}
        tag: ${{ needs.create-tag.outputs.tag }}
        image_registry: "quay.io/ccsportal/${{ env.APP_NAME }}"
        channel: ${{ steps.channel.outputs.channel }}
        app_image: "quay.io/ccsportal/${{ env.APP_NAME }}:${{ needs.create-tag.outputs.tag }}-fips"

        UPDATECTL_USER: ${{ secrets.CCS_UPDATECTL_USER }}
        UPDATECTL_SERVER: ${{ secrets.CCS_UPDATECTL_SERVER }}
        UPDATECTL_KEY: ${{ secrets.CCS_UPDATECTL_KEY }}
        COREROLLER_USER: ${{ secrets.CCS_COREROLLER_USER }}
        COREROLLER_SERVER: ${{ secrets.CCS_COREROLLER_SERVER }}
        COREROLLER_KEY: ${{ secrets.CCS_COREROLLER_KEY }}

  jira_update:
    name:  python/jira-update
    needs: [create-tag, coreupdate]
    runs-on: ubuntu-latest
    if: always() && ((github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)) || github.event.action == 'released')
    steps:
    - name: Checkout Code for Coreupdate Push
      uses: actions/checkout@v3.3.0

    - uses: glcp/mci-actions-variables-restore@v2
      with:
        artifact-name: variables-build

    - name: Update Jira
      uses: glcp/mci-actions-jira-update@v1.0
      with:
        pull_request_title: ${{ join(github.event.commits.*.message, ', ') }}
        build_tag: ${{ needs.create-tag.outputs.tag }}
        jira_user: ${{ secrets.CCS_JIRA_USER }}
        jira_apikey: ${{ secrets.CCS_JIRA_APIKEY }}
        gh_token: ${{ secrets.GLCP_GH_TOKEN }}
